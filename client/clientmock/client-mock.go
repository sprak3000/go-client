// Code generated by MockGen. DO NOT EDIT.
// Source: ../client/client.go

// Package clientmock is a generated GoMock package.
package clientmock

import (
	context "context"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	glitch "github.com/sprak3000/go-glitch/glitch"
)

// MockBaseClient is a mock of BaseClient interface.
type MockBaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockBaseClientMockRecorder
}

// MockBaseClientMockRecorder is the mock recorder for MockBaseClient.
type MockBaseClientMockRecorder struct {
	mock *MockBaseClient
}

// NewMockBaseClient creates a new mock instance.
func NewMockBaseClient(ctrl *gomock.Controller) *MockBaseClient {
	mock := &MockBaseClient{ctrl: ctrl}
	mock.recorder = &MockBaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseClient) EXPECT() *MockBaseClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockBaseClient) Do(ctx context.Context, method, slug string, query url.Values, headers http.Header, body io.Reader, response interface{}) glitch.DataError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, method, slug, query, headers, body, response)
	ret0, _ := ret[0].(glitch.DataError)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockBaseClientMockRecorder) Do(ctx, method, slug, query, headers, body, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockBaseClient)(nil).Do), ctx, method, slug, query, headers, body, response)
}

// MakeRequest mocks base method.
func (m *MockBaseClient) MakeRequest(ctx context.Context, method, slug string, query url.Values, headers http.Header, body io.Reader) (int, []byte, glitch.DataError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRequest", ctx, method, slug, query, headers, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(glitch.DataError)
	return ret0, ret1, ret2
}

// MakeRequest indicates an expected call of MakeRequest.
func (mr *MockBaseClientMockRecorder) MakeRequest(ctx, method, slug, query, headers, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRequest", reflect.TypeOf((*MockBaseClient)(nil).MakeRequest), ctx, method, slug, query, headers, body)
}
